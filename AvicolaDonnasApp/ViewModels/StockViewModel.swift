//
//  StockViewModel.swift
//  AvicolaDonnasApp
//
//  Created by Victor Martinez on 25/06/25.
//

import Foundation
import SwiftUI

// MARK: - üß† ViewModel Principal: Cerebro de Toda la Aplicaci√≥n
/// Coordina TODA la l√≥gica de negocio entre la UI y Firebase
/// Patr√≥n MVVM: Mantiene la UI reactiva y separada de la l√≥gica
@MainActor
final class StockViewModel: ObservableObject {
    
    static let shared = StockViewModel()
    private let firebaseManager = FirebaseManager.shared
    
    // MARK: - üìä Estado Principal de la Aplicaci√≥n
    @Published var currentDayStock: DailyStock?       // Stock del d√≠a actual
    @Published var stockHistory: [DailyStock] = []    // Historial completo
    @Published var todayCargoEntries: [CargoEntry] = [] // Movimientos de hoy
    @Published var allCargoEntries: [CargoEntry] = []   // Todos los movimientos
    @Published var appSettings: AppSettings = AppSettings() // Configuraci√≥n
    
    // MARK: - üéõÔ∏è Control de Interface y Estados
    @Published var isLoading = false          // Indicador de carga
    @Published var showingError = false       // Control de errores
    @Published var errorMessage = ""          // Mensaje de error actual
    @Published var selectedDate = Date()      // Fecha seleccionada en UI
    
    // MARK: - üìà Estad√≠sticas en Tiempo Real
    @Published var todayMovementCount = 0     // Movimientos del d√≠a
    @Published var todaySupplierCount = 0     // Proveedores √∫nicos hoy
    
    // MARK: - üî¢ Propiedades Calculadas para UI
    /// Estas propiedades se actualizan autom√°ticamente cuando cambia el estado
    var currentDateString: String {
        Date().dailyString
    }
    
    var selectedDateString: String {
        selectedDate.dailyString
    }
    
    var todayTotalPackages: Int {
        currentDayStock?.totalPackages ?? 0
    }
    
    var todayTotalWeight: Double {
        currentDayStock?.totalWeight ?? 0.0
    }
    
    var todayRosadoPackages: Int {
        currentDayStock?.rosadoPackages.getTotalPackages() ?? 0
    }
    
    var todayPardoPackages: Int {
        currentDayStock?.pardoPackages.getTotalPackages() ?? 0
    }
    
    var todayRosadoWeight: Double {
        currentDayStock?.rosadoPackages.getTotalWeight() ?? 0.0
    }
    
    var todayPardoWeight: Double {
        currentDayStock?.pardoPackages.getTotalWeight() ?? 0.0
    }
    
    var isDayOpen: Bool {
        !(currentDayStock?.isClosed ?? true)
    }
    
    private init() {
        Task {
            await loadInitialData()
        }
    }
    
    // MARK: - üöÄ Inicializaci√≥n: Carga Secuencial de Datos
    /// Carga todos los datos necesarios al iniciar la app
    /// Orden espec√≠fico para optimizar la experiencia del usuario
    func loadInitialData() async {
        isLoading = true
        do {
            print("üîÑ Cargando datos iniciales...")
            
            // 1. Configuraci√≥n (r√°pida)
            await loadAppSettings()
            
            // 2. Stock actual (prioritario para el usuario)
            await loadCurrentDayStock()
            
            // 3. Historial (para navegaci√≥n)
            await loadStockHistory()
            
            // 4. Movimientos de hoy (para el dashboard)
            await loadTodayCargoEntries()
            
            // 5. Estad√≠sticas (calculadas)
            await loadTodayStatistics()
            
            print("‚úÖ Datos iniciales cargados exitosamente")
            
        } catch {
            await handleError(error)
        }
        isLoading = false
    }
    
    // MARK: - ‚öôÔ∏è Gesti√≥n de Configuraci√≥n
    func loadAppSettings() async {
        do {
            if let settings = try await firebaseManager.fetchAppSettings() {
                appSettings = settings
                print("‚úÖ Configuraci√≥n cargada")
            } else {
                // Primera vez: crear configuraci√≥n inicial
                appSettings = AppSettings()
                try await firebaseManager.saveAppSettings(appSettings)
                print("‚úÖ Configuraci√≥n inicial creada")
            }
        } catch {
            await handleError(error)
        }
    }
    
    func updateAppSettings(_ newSettings: AppSettings) async {
        do {
            appSettings = newSettings
            try await firebaseManager.saveAppSettings(appSettings)
        } catch {
            await handleError(error)
        }
    }
    
    // MARK: - üì¶ Gesti√≥n de Stock Actual
    /// Carga o crea el stock del d√≠a actual
    /// Auto-creaci√≥n si es el primer acceso del d√≠a
    func loadCurrentDayStock() async {
        do {
            let today = currentDateString
            currentDayStock = try await firebaseManager.fetchDailyStock(for: today)
            
            // Si no existe, crear uno nuevo autom√°ticamente
            if currentDayStock == nil {
                currentDayStock = DailyStock(date: today)
                currentDayStock?.isCurrentDay = true
                try await firebaseManager.saveDailyStock(currentDayStock!)
                print("‚úÖ Nuevo stock diario creado para \(today)")
            } else {
                print("‚úÖ Stock diario cargado para \(today)")
            }
        } catch {
            await handleError(error)
        }
    }
    
    /// Actualiza el stock actual con rec√°lculo autom√°tico
    func updateCurrentDayStock() async {
        guard var stock = currentDayStock else { return }
        
        do {
            stock.updateTotals()
            
            try await firebaseManager.saveDailyStock(stock)
            currentDayStock = stock
            print("‚úÖ Stock actual actualizado")
        } catch {
            await handleError(error)
        }
    }
    
    // MARK: - üìã Gesti√≥n Avanzada de Movimientos
    /// M√©todo principal para registrar cualquier tipo de movimiento
    /// Actualiza autom√°ticamente el stock y las estad√≠sticas
    func addCargoEntry(rosadoPackages: PackageInventory = PackageInventory(),
                     pardoPackages: PackageInventory = PackageInventory(),
                     supplier: String,
                     notes: String? = nil,
                     type: LoadType = .incoming) async {
        do {
            print("üì¶ Agregando nuevo movimiento: \(type.displayName)")
            
            let entry = CargoEntry(
                date: currentDateString,
                rosadoPackages: rosadoPackages,
                pardoPackages: pardoPackages,
                type: type,
                supplier: supplier,
                notes: notes
            )
            
            // 1. Guardar el movimiento en historial
            try await firebaseManager.saveCargoEntry(entry)
            print("‚úÖ Movimiento guardado en Firebase")
            
            // 2. Actualizar stock actual seg√∫n el tipo de operaci√≥n
            if var currentStock = currentDayStock {
                if type == .incoming {
                    // Sumar al inventario
                    currentStock.addLoad(rosadoPackages, type: .rosado)
                    currentStock.addLoad(pardoPackages, type: .pardo)
                } else if type == .outgoing {
                    // Restar del inventario (validando no quedar en negativo)
                    subtractFromStock(&currentStock.rosadoPackages, packages: rosadoPackages)
                    subtractFromStock(&currentStock.pardoPackages, packages: pardoPackages)
                    currentStock.updateTotals()
                }
                
                try await firebaseManager.saveDailyStock(currentStock)
                currentDayStock = currentStock
                print("‚úÖ Stock actualizado")
            }
            
            // 3. Recargar datos dependientes
            await loadTodayCargoEntries()
            await loadTodayStatistics()
            
            // 4. Aprendizaje autom√°tico: agregar proveedor nuevo a lista frecuente
            if type == .incoming && !supplier.isEmpty && !appSettings.frequentSuppliers.contains(supplier) {
                appSettings.frequentSuppliers.append(supplier)
                try await firebaseManager.saveAppSettings(appSettings)
                print("‚úÖ Nuevo proveedor agregado a la lista")
            }
            
        } catch {
            await handleError(error)
        }
    }
    
    /// M√©todo de conveniencia para registrar un solo tipo de huevo
    /// Simplifica el uso desde la UI
    func addCargoEntry(packages: PackageInventory,
                     eggType: EggType,
                     supplier: String,
                     notes: String? = nil,
                     type: LoadType = .incoming) async {
        switch eggType {
        case .rosado:
            await addCargoEntry(rosadoPackages: packages, supplier: supplier, notes: notes, type: type)
        case .pardo:
            await addCargoEntry(pardoPackages: packages, supplier: supplier, notes: notes, type: type)
        }
    }
    
    func loadTodayCargoEntries() async {
        do {
            print("üìã Cargando movimientos de hoy...")
            todayCargoEntries = try await firebaseManager.fetchCargoEntries(for: currentDateString)
            print("‚úÖ Cargados \(todayCargoEntries.count) movimientos")
        } catch {
            await handleError(error)
        }
    }
    
    func loadAllCargoEntries() async {
        do {
            print("üìã Cargando todos los movimientos...")
            allCargoEntries = try await firebaseManager.fetchAllCargoEntries()
            print("‚úÖ Cargados \(allCargoEntries.count) movimientos totales")
        } catch {
            await handleError(error)
        }
    }
    
    // MARK: - üìä Sistema de Estad√≠sticas en Tiempo Real
    /// Calcula estad√≠sticas del d√≠a actual
    func loadTodayStatistics() async {
        do {
            print("üìä Cargando estad√≠sticas del d√≠a...")
            let (movements, suppliers) = try await firebaseManager.fetchCargoEntriesStats(for: currentDateString)
            
            todayMovementCount = movements
            todaySupplierCount = suppliers
            
            print("üìä Estad√≠sticas: \(movements) movimientos, \(suppliers) proveedores")
        } catch {
            await handleError(error)
        }
    }
    
    // MARK: - üìö Gesti√≥n de Historial
    func loadStockHistory() async {
        do {
            stockHistory = try await firebaseManager.fetchAllDailyStocks()
            print("‚úÖ Historial cargado: \(stockHistory.count) d√≠as")
        } catch {
            await handleError(error)
        }
    }
    
    func loadStockForDate(_ date: String) async -> DailyStock? {
        do {
            return try await firebaseManager.fetchDailyStock(for: date)
        } catch {
            await handleError(error)
            return nil
        }
    }
    
    /// Actualiza stock de cualquier fecha con propagaci√≥n inteligente
    func updateStockForDate(_ stock: DailyStock) async {
        do {
            var updatedStock = stock
            updatedStock.updateTotals()
            
            try await firebaseManager.saveDailyStock(updatedStock)
            
            // Actualizar en memoria para UI reactiva
            if let index = stockHistory.firstIndex(where: { $0.date == stock.date }) {
                stockHistory[index] = updatedStock
            }
            
            // Si es hoy, actualizar tambi√©n el stock actual
            if stock.date == currentDateString {
                currentDayStock = updatedStock
                await loadTodayStatistics() // Recalcular estad√≠sticas
            }
        } catch {
            await handleError(error)
        }
    }
    
    // MARK: - üîß Manipulaci√≥n Directa de Stock
    func updateStockForType(_ eggType: EggType, packages: PackageInventory) async {
        guard var stock = currentDayStock else { return }
        
        stock.setPackagesForType(eggType, packages: packages)
        await updateCurrentDayStock()
    }
    
    func getStockForType(_ eggType: EggType) -> PackageInventory {
        guard let stock = currentDayStock else { return PackageInventory() }
        return stock.getPackagesForType(eggType)
    }
    
    // MARK: - üîí Sistema de Cierre de D√≠a
    /// Cierra el d√≠a actual con registro autom√°tico
    func closeCurrentDay() async {
        guard var stock = currentDayStock else { return }
        
        do {
            print("üîí Cerrando d√≠a actual...")
            
            // Crear entrada autom√°tica de cierre
            let closeEntry = CargoEntry(
                date: currentDateString,
                rosadoPackages: stock.rosadoPackages,
                pardoPackages: stock.pardoPackages,
                type: .dayClose,
                supplier: "Sistema",
                notes: "Cierre autom√°tico del d√≠a"
            )
            
            try await firebaseManager.saveCargoEntry(closeEntry)
            
            // Marcar como cerrado con timestamp
            stock.isClosed = true
            stock.isCurrentDay = false
            stock.closedAt = Date()
            stock.updateTotals()
            
            try await firebaseManager.saveDailyStock(stock)
            currentDayStock = stock
            
            // Actualizar datos dependientes
            await loadStockHistory()
            await loadTodayCargoEntries()
            await loadTodayStatistics()
            
            print("‚úÖ D√≠a cerrado exitosamente")
            
        } catch {
            await handleError(error)
        }
    }
    
    /// Reabre un d√≠a cerrado (para correcciones)
    func reopenDay(_ date: String) async {
        do {
            print("üîì Reabriendo d√≠a: \(date)")
            
            if var stock = try await firebaseManager.fetchDailyStock(for: date) {
                stock.isClosed = false
                stock.closedAt = nil
                stock.updateTotals()
                
                if date == currentDateString {
                    stock.isCurrentDay = true
                    currentDayStock = stock
                }
                
                try await firebaseManager.saveDailyStock(stock)
                await loadStockHistory()
                
                if date == currentDateString {
                    await loadTodayCargoEntries()
                    await loadTodayStatistics()
                }
                
                print("‚úÖ D√≠a reabierto exitosamente")
            }
        } catch {
            await handleError(error)
        }
    }
    
    // MARK: - üìà Generador de Reportes Avanzados
    /// Genera reportes con an√°lisis completo de datos
    func generateReport(type: ReportType, startDate: String, endDate: String) async -> ReportData? {
        do {
            let dailyStocks = try await firebaseManager.fetchDailyStocks(from: startDate, to: endDate)
            let cargoEntries = try await firebaseManager.fetchCargoEntries(from: startDate, to: endDate)
            
            let dateRange = "\(startDate) - \(endDate)"
            let title = "\(type.displayName) - \(dateRange)"
            
            return ReportData(
                title: title,
                dateRange: dateRange,
                startDate: startDate,
                endDate: endDate,
                dailyStocks: dailyStocks,
                cargoEntries: cargoEntries,
                reportType: type
            )
        } catch {
            await handleError(error)
            return nil
        }
    }
    
    // MARK: - üìä An√°lisis de Datos Inteligente
    /// Genera estad√≠sticas por tipo de huevo
    func getEggTypeStatistics() -> [(type: EggType, packages: Int, weight: Double)] {
        guard let stock = currentDayStock else { return [] }
        
        return [
            (type: .rosado, packages: stock.rosadoPackages.getTotalPackages(), weight: stock.rosadoPackages.getTotalWeight()),
            (type: .pardo, packages: stock.pardoPackages.getTotalPackages(), weight: stock.pardoPackages.getTotalWeight())
        ].filter { $0.packages > 0 }
    }
    
    /// Distribuci√≥n de pesos para gr√°ficos
    func getWeightDistribution(for eggType: EggType) -> [(weight: Int, count: Int)] {
        let packages = getStockForType(eggType)
        return packages.getWeightSummary()
    }
    
    /// An√°lisis de proveedores del d√≠a
    func getTodaySupplierSummary() -> [String: (packages: Int, deliveries: Int)] {
        let incomingEntries = todayCargoEntries.filter {
            $0.type == .incoming && !$0.supplier.isEmpty && $0.supplier != "Sistema"
        }
        
        var summary: [String: (packages: Int, deliveries: Int)] = [:]
        
        for entry in incomingEntries {
            if let existing = summary[entry.supplier] {
                summary[entry.supplier] = (
                    packages: existing.packages + entry.totalPackages,
                    deliveries: existing.deliveries + 1
                )
            } else {
                summary[entry.supplier] = (
                    packages: entry.totalPackages,
                    deliveries: 1
                )
            }
        }
        
        return summary
    }
    
    /// Lista de proveedores √∫nicos de hoy
    func getTodayUniqueSuppliers() -> Set<String> {
        return Set(todayCargoEntries
            .filter { $0.type == .incoming && !$0.supplier.isEmpty && $0.supplier != "Sistema" }
            .map { $0.supplier })
    }
    
    // MARK: - üõ†Ô∏è M√©todos de Utilidad y Validaci√≥n
    /// Resta paquetes del stock evitando valores negativos
    private func subtractFromStock(_ stock: inout PackageInventory, packages: PackageInventory) {
        for weight in stock.packageWeights {
            let currentPackages = stock.getPackagesForWeight(weight)
            let packagesToSubtract = packages.getPackagesForWeight(weight)
            
            var newPackages = currentPackages
            for i in 0..<10 {
                newPackages[i] = max(0, newPackages[i] - packagesToSubtract[i])
            }
            
            stock.setPackagesForWeight(weight, packages: newPackages)
        }
    }
    
    /// Valida que no haya valores negativos en paquetes
    func validatePackageInput(_ packages: PackageInventory) -> Bool {
        for weight in packages.packageWeights {
            let weightPackages = packages.getPackagesForWeight(weight)
            if weightPackages.contains(where: { $0 < 0 }) {
                return false
            }
        }
        return true
    }
    
    /// Validaci√≥n completa de entrada de carga
    func validateCargoEntry(rosadoPackages: PackageInventory, pardoPackages: PackageInventory) -> Bool {
        return validatePackageInput(rosadoPackages) && validatePackageInput(pardoPackages)
    }
    
    /// Formatea peso con decimales para UI
    func getPackageDecimalString(_ weight: Int, decimal: Int) -> String {
        return "\(weight).\(decimal)"
    }
    
    /// Verificaci√≥n r√°pida de disponibilidad de stock
    func hasStockForType(_ eggType: EggType) -> Bool {
        return getStockForType(eggType).hasStock()
    }
    
    // MARK: - ‚ö†Ô∏è Sistema Robusto de Manejo de Errores
    /// Centraliza el manejo de errores con logging detallado
    private func handleError(_ error: Error) async {
        errorMessage = error.localizedDescription
        showingError = true
        print("‚ùå StockViewModel Error: \(error)")
    }
    
    func clearError() {
        showingError = false
        errorMessage = ""
    }
    
    // MARK: - üîÑ M√©todos de Actualizaci√≥n y Sincronizaci√≥n
    /// Recarga completa de todos los datos
    func refreshAllData() async {
        print("üîÑ Refrescando todos los datos...")
        await loadInitialData()
    }
    
    /// Actualizaci√≥n r√°pida solo del estado actual
    func refreshCurrentStock() async {
        print("üîÑ Refrescando stock actual...")
        await loadCurrentDayStock()
        await loadTodayCargoEntries()
        await loadTodayStatistics()
    }
}
